{
  "_args": [
    [
      {
        "raw": "passport-slack-ponycode@^0.0.2",
        "scope": null,
        "escapedName": "passport-slack-ponycode",
        "name": "passport-slack-ponycode",
        "rawSpec": "^0.0.2",
        "spec": ">=0.0.2 <0.0.3",
        "type": "range"
      },
      "/home/jonas/Desktop/Studium/MassClickOrchestra"
    ]
  ],
  "_from": "passport-slack-ponycode@>=0.0.2 <0.0.3",
  "_id": "passport-slack-ponycode@0.0.2",
  "_inCache": true,
  "_location": "/passport-slack-ponycode",
  "_npmUser": {
    "name": "jkennedy1980",
    "email": "josh@ponycode.com"
  },
  "_npmVersion": "1.4.23",
  "_phantomChildren": {},
  "_requested": {
    "raw": "passport-slack-ponycode@^0.0.2",
    "scope": null,
    "escapedName": "passport-slack-ponycode",
    "name": "passport-slack-ponycode",
    "rawSpec": "^0.0.2",
    "spec": ">=0.0.2 <0.0.3",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/passport-slack-ponycode/-/passport-slack-ponycode-0.0.2.tgz",
  "_shasum": "a855adf1136b274344e63384496f0b8c6b00e29a",
  "_shrinkwrap": null,
  "_spec": "passport-slack-ponycode@^0.0.2",
  "_where": "/home/jonas/Desktop/Studium/MassClickOrchestra",
  "author": {
    "name": "Joshua Kennedy"
  },
  "dependencies": {
    "passport-oauth": "^1.0.0",
    "passport-strategy": "1.0.0"
  },
  "description": "Slack authentication strategy for Passport.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "a855adf1136b274344e63384496f0b8c6b00e29a",
    "tarball": "https://registry.npmjs.org/passport-slack-ponycode/-/passport-slack-ponycode-0.0.2.tgz"
  },
  "engines": {
    "node": "0.10.x"
  },
  "gitHead": "65be72e370e1cf8a6132cdc3c68918d218d98c4d",
  "keywords": [
    "passport",
    "slack",
    "auth",
    "authn",
    "authentication",
    "identity"
  ],
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "jkennedy1980",
      "email": "josh@ponycode.com"
    }
  ],
  "name": "passport-slack-ponycode",
  "optionalDependencies": {},
  "readme": "# passport-slack\n\n[Passport](http://passportjs.org/) strategy for authenticating with [Slack](https://slack.com/)\nusing the OAuth 2.0 API.\n\nThis module lets you authenticate using Slack in your Node.js applications.\nBy plugging into Passport, Slack authentication can be easily integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-slack-ponycode\n\n## Usage\n\n#### Configure Strategy\n\nThe Slack authentication strategy authenticates users using a Slack account\nand OAuth tokens.  The strategy requires a `verify` callback, which receives the\naccess token and corresponding secret as arguments, as well as `user` which\ncontains the authenticated user's slack info. The `verify` callback must\ncall `done` providing a user to complete authentication.\n\nIn order to identify your application to Slack, specify the clientID,\nclientSecret, and redirect URL within `options`.  The client ID and secret\nare obtained by [creating an application](https://api.slack.com/applications) at\nSlacks's [api](https://api.slack.com/applications) site.\n\n    var SlackStrategy = require('./passport-slack').SlackStrategy;\n    passport.use( 'slack', new SlackStrategy({\n        clientID: \"[slack client id]\",\n        clientSecret:\"[slack client secret]\",\n        callbackURL: \"[host]/authenticate/callback\",\n        slackTeam: \"[optional slack team id to force joining a team]\"\n    }, function( token, tokenSecret, profile, done ){\n\n        // This is your chance to find a User in your database.\n        var User = neoteric.model('User');\n        User.findBySlackId( profile.id, function( error, existingUser ){\n            if( error ) return done( error, false );\n\n            if( existingUser ){\n                done( error, existingUser );\n            }else{\n                var newUser = new User();\n                newUser.username = parsedBody.user;\n                newUser.slackId = slackId;\n                newUser.save( function( error, newUser ){\n                    done( error, newUser );\n                });\n            }\n        });\n\n    }));\n\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'slack'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/auth/slack',\n      passport.authenticate('slack'));\n\n    app.get('/auth/slack/callback',\n      passport.authenticate('slack', { team: \"[slack team id]\" failureRedirect: '/login' }),\n      function(req, res) {\n        // Successful authentication, redirect home.\n        res.redirect('/');\n      });\n\n## Credits\n\n  - [Josh Kennedy](http://github.com/jkennedy1980)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2014 Josh Kennedy <[http://ponycode.com/](http://ponycode.com/)>",
  "readmeFilename": "README.md",
  "scripts": {},
  "version": "0.0.2",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": "0.10.x"
      },
      "pkgid": "passport-slack-ponycode@0.0.2"
    }
  ]
}
